package DataDicitonaryDSL2.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintFunction;
import jetbrains.mps.smodel.runtime.ConstraintContext_CanBeAncestor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseScopeProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.scopes.runtime.NamedElementsScope;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import DataDicitonaryDSL2.behavior.Domain__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class SemanticDomain_Constraints extends BaseConstraintsDescriptor {
  public SemanticDomain_Constraints() {
    super(CONCEPTS.SemanticDomain$Me);
  }

  @Override
  protected ConstraintFunction<ConstraintContext_CanBeAncestor, Boolean> calculateCanBeAncestorConstraint() {
    return new ConstraintFunction<ConstraintContext_CanBeAncestor, Boolean>() {
      @NotNull
      public Boolean invoke(@NotNull ConstraintContext_CanBeAncestor context, @Nullable CheckingNodeContext checkingNodeContext) {
        boolean result = staticCanBeAnAncestor(context.getNode(), context.getChildNode(), context.getChildConcept(), context.getParentNode(), context.getLink());

        if (!(result) && checkingNodeContext != null) {
          checkingNodeContext.setBreakingNode(canBeRootBreakingPoint);
        }

        return result;
      }
    };
  }
  @Override
  protected Map<SReferenceLink, ReferenceConstraintsDescriptor> getSpecifiedReferences() {
    BaseReferenceConstraintsDescriptor d0 = new BaseReferenceConstraintsDescriptor(LINKS.domainRef$oCPK, this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }
      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseScopeProvider() {
          @Override
          public SNodeReference getSearchScopeValidatorNode() {
            return breakingNode_hes8uo_a0a0a0a0a1a0a0a0d;
          }
          @Override
          public Scope createScope(final ReferenceConstraintsContext _context) {
            final List<SNode> domains = new ArrayList<SNode>();

            ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.getNodeAncestor(_context.getReferenceNode(), CONCEPTS.DataDictionaryModel$O3, false, false), LINKS.semanticDomains$gacN)).visitAll(new IVisitor<SNode>() {
              public void visit(SNode sd) {
                if (_context.getReferenceNode() != sd) {
                  ListSequence.fromList(domains).addElement(sd);
                }
              }
            });
            ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.getNodeAncestor(_context.getReferenceNode(), CONCEPTS.DataDictionaryModel$O3, false, false), LINKS.predefinedDomains$M0T0)).visitAll(new IVisitor<SNode>() {
              public void visit(SNode it) {
                ListSequence.fromList(domains).addElement(it);
              }
            });
            return new NamedElementsScope(domains);
          }
        };
      }
    };
    Map<SReferenceLink, ReferenceConstraintsDescriptor> references = new HashMap<SReferenceLink, ReferenceConstraintsDescriptor>();
    references.put(d0.getReference(), d0);
    return references;
  }
  private static boolean staticCanBeAnAncestor(SNode node, SNode childNode, SAbstractConcept childConcept, SNode parentNode, SContainmentLink link) {
    SNode predefinedDomain = (SNode) Domain__BehaviorDescriptor.returnPredefinedDomain_id3ltobZzG4Xc.invoke(node);

    if (SNodeOperations.isInstanceOf(predefinedDomain, CONCEPTS.Character$Pj)) {
      return !(SConceptOperations.isExactly(SNodeOperations.asSConcept(childConcept), CONCEPTS.BetweenConstraint$fK));
    }
    if (SNodeOperations.isInstanceOf(predefinedDomain, CONCEPTS.Logical$Sf)) {
      return SConceptOperations.isExactly(SNodeOperations.asSConcept(childConcept), CONCEPTS.NotNullConstraint$7s);
    }
    return true;
  }
  private static final SNodePointer canBeRootBreakingPoint = new SNodePointer("r:8e50902a-bd1b-43d4-b7ef-74cb9c24c4ee(DataDicitonaryDSL2.constraints)", "3998464444457094602");
  private static final SNodePointer breakingNode_hes8uo_a0a0a0a0a1a0a0a0d = new SNodePointer("r:8e50902a-bd1b-43d4-b7ef-74cb9c24c4ee(DataDicitonaryDSL2.constraints)", "3998464444452186680");

  private static final class CONCEPTS {
    /*package*/ static final SConcept SemanticDomain$Me = MetaAdapterFactory.getConcept(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f052f3579L, "DataDicitonaryDSL2.structure.SemanticDomain");
    /*package*/ static final SConcept DataDictionaryModel$O3 = MetaAdapterFactory.getConcept(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f05288978L, "DataDicitonaryDSL2.structure.DataDictionaryModel");
    /*package*/ static final SConcept Character$Pj = MetaAdapterFactory.getConcept(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f052e47aaL, "DataDicitonaryDSL2.structure.Character");
    /*package*/ static final SConcept BetweenConstraint$fK = MetaAdapterFactory.getConcept(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0xbb4b2c0f5806237L, "DataDicitonaryDSL2.structure.BetweenConstraint");
    /*package*/ static final SConcept NotNullConstraint$7s = MetaAdapterFactory.getConcept(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x11e31b8d1c07623dL, "DataDicitonaryDSL2.structure.NotNullConstraint");
    /*package*/ static final SConcept Logical$Sf = MetaAdapterFactory.getConcept(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x14f973452d1efc57L, "DataDicitonaryDSL2.structure.Logical");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink domainRef$oCPK = MetaAdapterFactory.getReferenceLink(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f052f3579L, 0x6198640f052f357cL, "domainRef");
    /*package*/ static final SContainmentLink semanticDomains$gacN = MetaAdapterFactory.getContainmentLink(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f05288978L, 0x6198640f052fa1e9L, "semanticDomains");
    /*package*/ static final SContainmentLink predefinedDomains$M0T0 = MetaAdapterFactory.getContainmentLink(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f05288978L, 0x6198640f052ed8ffL, "predefinedDomains");
  }
}
