package DataDicitonaryDSL2.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new AggregationDefinition_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new AggregationStructureElement_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new AndConstraint_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new BetweenConstraint_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new Character_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new ComparisonConstraint_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new DataDictionaryModel_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new Date_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new Decimal_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new ExclusiveSpecialization_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new InConstraint_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new InValue_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new Integer_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new Logical_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new NonexclusiveSpecialization_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new NotNullConstraint_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new OrConstraint_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new PredefinedDomainLengthConstraint_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new ReferenceFieldDefinition_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new ReferenceFieldElement_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new SemanticDomain_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new SetStructureElement_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new ValueFieldDefinition_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new ValueFieldElement_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new SemanticDomain_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f0528897eL), MetaIdFactory.conceptId(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f05297fb8L), MetaIdFactory.conceptId(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x11e31b8d1c0e392dL), MetaIdFactory.conceptId(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0xbb4b2c0f5806237L), MetaIdFactory.conceptId(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f052e47aaL), MetaIdFactory.conceptId(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x11e31b8d1c0975b2L), MetaIdFactory.conceptId(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f05288978L), MetaIdFactory.conceptId(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f052e47a9L), MetaIdFactory.conceptId(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x14f973452d1efc3bL), MetaIdFactory.conceptId(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x14f973452d1519c2L), MetaIdFactory.conceptId(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x11e31b8d1bfa355eL), MetaIdFactory.conceptId(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x11e31b8d1c055781L), MetaIdFactory.conceptId(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f0531e4d7L), MetaIdFactory.conceptId(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x14f973452d1efc57L), MetaIdFactory.conceptId(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x14f973452d1519c3L), MetaIdFactory.conceptId(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x11e31b8d1c07623dL), MetaIdFactory.conceptId(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x11e31b8d1c0e395eL), MetaIdFactory.conceptId(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x377d663a3af96695L), MetaIdFactory.conceptId(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x204b5bc0d63e3eb5L), MetaIdFactory.conceptId(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x448d43d5c79e8d33L), MetaIdFactory.conceptId(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f052f3579L), MetaIdFactory.conceptId(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f0529afcbL), MetaIdFactory.conceptId(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f0529e960L), MetaIdFactory.conceptId(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f05295a88L)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f052f3579L)).seal();
}
