package DataDicitonaryDSL2.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.errors.BaseQuickFixProvider;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_BetweenConstraint_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_BetweenConstraint_NonTypesystemRule() {
  }
  public void applyRule(final SNode betweenConstraint, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if (SPropertyOperations.getInteger(betweenConstraint, PROPS.number1$yR8I) > SPropertyOperations.getInteger(betweenConstraint, PROPS.number2$yWy5)) {
      {
        final MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(betweenConstraint, "First number must be less then second.", "r:3423e4e2-9ce9-41e5-854b-6b75f9442cd9(DataDicitonaryDSL2.typesystem)", "1288904211232828839", null, errorTarget);
        {
          BaseQuickFixProvider intentionProvider = new BaseQuickFixProvider("DataDicitonaryDSL2.typesystem.quickFixSwitchPlaces_QuickFix", "1288904211232848048", false);
          intentionProvider.putArgument("b", betweenConstraint);
          _reporter_2309309498.addIntentionProvider(intentionProvider);
        }
      }
    }

  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.BetweenConstraint$fK;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class PROPS {
    /*package*/ static final SProperty number2$yWy5 = MetaAdapterFactory.getProperty(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0xbb4b2c0f5806237L, 0xbb4b2c0f580623aL, "number2");
    /*package*/ static final SProperty number1$yR8I = MetaAdapterFactory.getProperty(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0xbb4b2c0f5806237L, 0xbb4b2c0f5806238L, "number1");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept BetweenConstraint$fK = MetaAdapterFactory.getConcept(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0xbb4b2c0f5806237L, "DataDicitonaryDSL2.structure.BetweenConstraint");
  }
}
