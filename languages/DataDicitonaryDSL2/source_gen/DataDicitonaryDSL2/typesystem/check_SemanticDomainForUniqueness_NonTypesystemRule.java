package DataDicitonaryDSL2.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SConcept;

public class check_SemanticDomainForUniqueness_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_SemanticDomainForUniqueness_NonTypesystemRule() {
  }
  public void applyRule(final SNode semanticDomain, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode dataDictionaryModel = (SNode) SNodeOperations.getParent(semanticDomain);
    for (SNode pred : ListSequence.fromList(SLinkOperations.getChildren(dataDictionaryModel, LINKS.predefinedDomains$M0T0))) {
      if (SPropertyOperations.getString(semanticDomain, PROPS.name$MnvL).equals(SConceptOperations.conceptAlias(SNodeOperations.getConcept(pred)))) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(semanticDomain, "Semantic domain can't have same name as predefined domain", "r:3423e4e2-9ce9-41e5-854b-6b75f9442cd9(DataDicitonaryDSL2.typesystem)", "1511365890906931337", null, errorTarget);
        }
      }
    }
    for (SNode sem : ListSequence.fromList(SLinkOperations.getChildren(dataDictionaryModel, LINKS.semanticDomains$gacN))) {
      if (SPropertyOperations.getString(semanticDomain, PROPS.name$MnvL).equals(SPropertyOperations.getString(sem, PROPS.name$MnvL)) && semanticDomain != sem) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(semanticDomain, "Semantic domain name must be unique", "r:3423e4e2-9ce9-41e5-854b-6b75f9442cd9(DataDicitonaryDSL2.typesystem)", "1511365890906938633", null, errorTarget);
        }
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.SemanticDomain$Me;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink predefinedDomains$M0T0 = MetaAdapterFactory.getContainmentLink(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f05288978L, 0x6198640f052ed8ffL, "predefinedDomains");
    /*package*/ static final SContainmentLink semanticDomains$gacN = MetaAdapterFactory.getContainmentLink(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f05288978L, 0x6198640f052fa1e9L, "semanticDomains");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept SemanticDomain$Me = MetaAdapterFactory.getConcept(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f052f3579L, "DataDicitonaryDSL2.structure.SemanticDomain");
  }
}
