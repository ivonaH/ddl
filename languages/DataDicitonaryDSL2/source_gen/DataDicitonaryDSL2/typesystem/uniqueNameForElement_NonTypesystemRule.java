package DataDicitonaryDSL2.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class uniqueNameForElement_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public uniqueNameForElement_NonTypesystemRule() {
  }
  public void applyRule(final SNode element, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode dataDictionaryModel = SNodeOperations.getNodeAncestor(element, CONCEPTS.DataDictionaryModel$O3, false, false);
    SNode agregationDefinition = SNodeOperations.getNodeAncestor(element, CONCEPTS.AggregationDefinition$18, false, false);

    for (SNode el : ListSequence.fromList(SLinkOperations.getChildren(agregationDefinition, LINKS.elements$hign))) {
      if (SPropertyOperations.getString(el, PROPS.name$MnvL).equals(SPropertyOperations.getString(element, PROPS.name$MnvL)) && el != element) {
        if (SNodeOperations.isInstanceOf(el, CONCEPTS.ValueFieldElement$Uu)) {

          for (SNode fi : ListSequence.fromList(SLinkOperations.getChildren(agregationDefinition, LINKS.fieldDefinitions$G$NH))) {
          }
          {
            final MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(element, "Field name must be unique", "r:3423e4e2-9ce9-41e5-854b-6b75f9442cd9(DataDicitonaryDSL2.typesystem)", "1511365890905845409", null, errorTarget);
          }

        } else {
          {
            final MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(element, "Structure name must be unique.", "r:3423e4e2-9ce9-41e5-854b-6b75f9442cd9(DataDicitonaryDSL2.typesystem)", "2327054516252086833", null, errorTarget);
          }
        }
      }
      if (SPropertyOperations.getString(element, PROPS.name$MnvL).equals(SPropertyOperations.getString(agregationDefinition, PROPS.name$MnvL))) {
        {
          final MessageTarget errorTarget = new NodeMessageTarget();
          IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(element, "Field can't have same name as stucture.", "r:3423e4e2-9ce9-41e5-854b-6b75f9442cd9(DataDicitonaryDSL2.typesystem)", "2327054516252384003", null, errorTarget);
        }
      }
    }



  }
  public SAbstractConcept getApplicableConcept() {
    return CONCEPTS.Element$EY;
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept DataDictionaryModel$O3 = MetaAdapterFactory.getConcept(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f05288978L, "DataDicitonaryDSL2.structure.DataDictionaryModel");
    /*package*/ static final SConcept AggregationDefinition$18 = MetaAdapterFactory.getConcept(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f0528897eL, "DataDicitonaryDSL2.structure.AggregationDefinition");
    /*package*/ static final SConcept ValueFieldElement$Uu = MetaAdapterFactory.getConcept(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f05295a88L, "DataDicitonaryDSL2.structure.ValueFieldElement");
    /*package*/ static final SConcept Element$EY = MetaAdapterFactory.getConcept(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f05295a7dL, "DataDicitonaryDSL2.structure.Element");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink fieldDefinitions$G$NH = MetaAdapterFactory.getContainmentLink(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f05288979L, 0x6198640f0529e9b0L, "fieldDefinitions");
    /*package*/ static final SContainmentLink elements$hign = MetaAdapterFactory.getContainmentLink(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f05288979L, 0x6198640f05295aa4L, "elements");
  }
}
