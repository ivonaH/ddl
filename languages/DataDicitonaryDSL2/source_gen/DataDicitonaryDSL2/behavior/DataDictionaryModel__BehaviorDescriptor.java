package DataDicitonaryDSL2.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.scope.Scope;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.ArrayList;
import jetbrains.mps.scope.ListScope;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.mps.openapi.language.SConcept;

public final class DataDictionaryModel__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f05288978L, "DataDicitonaryDSL2.structure.DataDictionaryModel");

  public static final SMethod<Scope> getScope_id52_Geb4QDV$ = new SMethodBuilder<Scope>(new SJavaCompoundTypeImpl(Scope.class)).name("getScope").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("52_Geb4QDV$").build(SMethodBuilder.createJavaParameter((Class<SAbstractConcept>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(getScope_id52_Geb4QDV$);

  private static void ___init___(@NotNull SNode __thisNode__) {
    ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.predefinedDomains$M0T0)).addElement(SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f052e47a9L, "DataDicitonaryDSL2.structure.Date")));
    ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.predefinedDomains$M0T0)).addElement(SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x14f973452d1efc3bL, "DataDicitonaryDSL2.structure.Decimal")));
    ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.predefinedDomains$M0T0)).addElement(SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f0531e4d7L, "DataDicitonaryDSL2.structure.Integer")));
    ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.predefinedDomains$M0T0)).addElement(SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f052e47aaL, "DataDicitonaryDSL2.structure.Character")));
    ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.predefinedDomains$M0T0)).addElement(SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x14f973452d1efc57L, "DataDicitonaryDSL2.structure.Logical")));


    ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.predefinedDomains$M0T0)).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        SPropertyOperations.assign(it, PROPS.name$MnvL, SNodeOperations.getConcept(it).getConceptAlias());
      }
    });

  }

  /*package*/ static Scope getScope_id52_Geb4QDV$(@NotNull SNode __thisNode__, SAbstractConcept kind, SNode child) {
    if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(kind), CONCEPTS.AggregationDefinition$18)) {
      final SNode ag = (SNode) child;
      final List<SNode> filteredAggregationDefinitionList = new ArrayList<SNode>();
      ListSequence.fromList(SLinkOperations.getChildren(__thisNode__, LINKS.aggregations$ERT7)).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          if (SPropertyOperations.getString(it, PROPS.name$MnvL) != SPropertyOperations.getString(ag, PROPS.name$MnvL)) {
            ListSequence.fromList(filteredAggregationDefinitionList).addElement(it);
          }
        }
      });
      ListScope ls = new ListScope(filteredAggregationDefinitionList) {
        public String getName(SNode listChild) {
          return SPropertyOperations.getString(SNodeOperations.cast(listChild, CONCEPTS.AggregationDefinition$18), PROPS.name$MnvL);
        }
      };
      return ls;
    }
    return null;
  }

  /*package*/ DataDictionaryModel__BehaviorDescriptor() {
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((Scope) getScope_id52_Geb4QDV$(node, (SAbstractConcept) parameters[0], (SNode) parameters[1]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }

  private static final class LINKS {
    /*package*/ static final SContainmentLink predefinedDomains$M0T0 = MetaAdapterFactory.getContainmentLink(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f05288978L, 0x6198640f052ed8ffL, "predefinedDomains");
    /*package*/ static final SContainmentLink aggregations$ERT7 = MetaAdapterFactory.getContainmentLink(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f05288978L, 0x6198640f052889ebL, "aggregations");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$MnvL = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
  }

  private static final class CONCEPTS {
    /*package*/ static final SConcept AggregationDefinition$18 = MetaAdapterFactory.getConcept(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f0528897eL, "DataDicitonaryDSL2.structure.AggregationDefinition");
  }
}
