package DataDicitonaryDSL2.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myPredefinedDomainLengthConstraint__BehaviorDescriptor = new PredefinedDomainLengthConstraint__BehaviorDescriptor();
  private final BHDescriptor myDataDictionaryModel__BehaviorDescriptor = new DataDictionaryModel__BehaviorDescriptor();
  private final BHDescriptor myAggregationDefinition__BehaviorDescriptor = new AggregationDefinition__BehaviorDescriptor();
  private final BHDescriptor myDomain__BehaviorDescriptor = new Domain__BehaviorDescriptor();
  private final BHDescriptor myPredefinedDomain__BehaviorDescriptor = new PredefinedDomain__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return myAggregationDefinition__BehaviorDescriptor;
      case 1:
        return myDataDictionaryModel__BehaviorDescriptor;
      case 2:
        return myDomain__BehaviorDescriptor;
      case 3:
        return myPredefinedDomain__BehaviorDescriptor;
      case 4:
        return myPredefinedDomainLengthConstraint__BehaviorDescriptor;
      default:
    }
    return null;
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f0528897eL), MetaIdFactory.conceptId(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f05288978L), MetaIdFactory.conceptId(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f052e02edL), MetaIdFactory.conceptId(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x6198640f052e47a6L), MetaIdFactory.conceptId(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L, 0x377d663a3af96695L)).seal();
}
