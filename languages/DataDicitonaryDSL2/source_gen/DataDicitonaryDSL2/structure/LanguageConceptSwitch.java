package DataDicitonaryDSL2.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AggregationDefinition = 0;
  public static final int AggregationStructureElement = 1;
  public static final int AndConstraint = 2;
  public static final int BetweenConstraint = 3;
  public static final int Character = 4;
  public static final int ComparisonConstraint = 5;
  public static final int Constraint = 6;
  public static final int ConstraintCriterium = 7;
  public static final int ConstraintOperator = 8;
  public static final int DataDictionaryModel = 9;
  public static final int Date = 10;
  public static final int Decimal = 11;
  public static final int Domain = 12;
  public static final int Element = 13;
  public static final int ExclusiveSpecialization = 14;
  public static final int FieldDefinition = 15;
  public static final int InConstraint = 16;
  public static final int InValue = 17;
  public static final int Integer = 18;
  public static final int Logical = 19;
  public static final int NonexclusiveSpecialization = 20;
  public static final int NotNullConstraint = 21;
  public static final int OrConstraint = 22;
  public static final int PredefinedDomain = 23;
  public static final int PredefinedDomainLengthConstraint = 24;
  public static final int ReferenceFieldDefinition = 25;
  public static final int ReferenceFieldElement = 26;
  public static final int SemanticDomain = 27;
  public static final int SetStructureElement = 28;
  public static final int SpecializationStructureElement = 29;
  public static final int StructureDefinition = 30;
  public static final int StructureElement = 31;
  public static final int ValueFieldDefinition = 32;
  public static final int ValueFieldElement = 33;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xe42098a93fd7446cL, 0x8eb044c9c71b5415L);
    builder.put(0x6198640f0528897eL, AggregationDefinition);
    builder.put(0x6198640f05297fb8L, AggregationStructureElement);
    builder.put(0x11e31b8d1c0e392dL, AndConstraint);
    builder.put(0xbb4b2c0f5806237L, BetweenConstraint);
    builder.put(0x6198640f052e47aaL, Character);
    builder.put(0x11e31b8d1c0975b2L, ComparisonConstraint);
    builder.put(0xbb4b2c0f5806234L, Constraint);
    builder.put(0xbb4b2c0f5806235L, ConstraintCriterium);
    builder.put(0xbb4b2c0f5806236L, ConstraintOperator);
    builder.put(0x6198640f05288978L, DataDictionaryModel);
    builder.put(0x6198640f052e47a9L, Date);
    builder.put(0x14f973452d1efc3bL, Decimal);
    builder.put(0x6198640f052e02edL, Domain);
    builder.put(0x6198640f05295a7dL, Element);
    builder.put(0x14f973452d1519c2L, ExclusiveSpecialization);
    builder.put(0x6198640f0529e95bL, FieldDefinition);
    builder.put(0x11e31b8d1bfa355eL, InConstraint);
    builder.put(0x11e31b8d1c055781L, InValue);
    builder.put(0x6198640f0531e4d7L, Integer);
    builder.put(0x14f973452d1efc57L, Logical);
    builder.put(0x14f973452d1519c3L, NonexclusiveSpecialization);
    builder.put(0x11e31b8d1c07623dL, NotNullConstraint);
    builder.put(0x11e31b8d1c0e395eL, OrConstraint);
    builder.put(0x6198640f052e47a6L, PredefinedDomain);
    builder.put(0x377d663a3af96695L, PredefinedDomainLengthConstraint);
    builder.put(0x204b5bc0d63e3eb5L, ReferenceFieldDefinition);
    builder.put(0x448d43d5c79e8d33L, ReferenceFieldElement);
    builder.put(0x6198640f052f3579L, SemanticDomain);
    builder.put(0x6198640f0529afcbL, SetStructureElement);
    builder.put(0x14f973452d1519bfL, SpecializationStructureElement);
    builder.put(0x6198640f05288979L, StructureDefinition);
    builder.put(0x6198640f05297fb3L, StructureElement);
    builder.put(0x6198640f0529e960L, ValueFieldDefinition);
    builder.put(0x6198640f05295a88L, ValueFieldElement);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
