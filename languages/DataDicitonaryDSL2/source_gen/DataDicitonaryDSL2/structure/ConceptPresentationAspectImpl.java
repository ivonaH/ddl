package DataDicitonaryDSL2.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AggregationDefinition;
  private ConceptPresentation props_AggregationStructureElement;
  private ConceptPresentation props_AndConstraint;
  private ConceptPresentation props_BetweenConstraint;
  private ConceptPresentation props_Character;
  private ConceptPresentation props_ComparisonConstraint;
  private ConceptPresentation props_Constraint;
  private ConceptPresentation props_ConstraintCriterium;
  private ConceptPresentation props_ConstraintOperator;
  private ConceptPresentation props_DataDictionaryModel;
  private ConceptPresentation props_Date;
  private ConceptPresentation props_Decimal;
  private ConceptPresentation props_Domain;
  private ConceptPresentation props_Element;
  private ConceptPresentation props_ExclusiveSpecialization;
  private ConceptPresentation props_FieldDefinition;
  private ConceptPresentation props_InConstraint;
  private ConceptPresentation props_InValue;
  private ConceptPresentation props_Integer;
  private ConceptPresentation props_Logical;
  private ConceptPresentation props_NonexclusiveSpecialization;
  private ConceptPresentation props_NotNullConstraint;
  private ConceptPresentation props_OrConstraint;
  private ConceptPresentation props_PredefinedDomain;
  private ConceptPresentation props_PredefinedDomainLengthConstraint;
  private ConceptPresentation props_ReferenceFieldDefinition;
  private ConceptPresentation props_ReferenceFieldElement;
  private ConceptPresentation props_SemanticDomain;
  private ConceptPresentation props_SetStructureElement;
  private ConceptPresentation props_SpecializationStructureElement;
  private ConceptPresentation props_StructureDefinition;
  private ConceptPresentation props_StructureElement;
  private ConceptPresentation props_ValueFieldDefinition;
  private ConceptPresentation props_ValueFieldElement;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AggregationDefinition:
        if (props_AggregationDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AggregationDefinition = cpb.create();
        }
        return props_AggregationDefinition;
      case LanguageConceptSwitch.AggregationStructureElement:
        if (props_AggregationStructureElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AggregationStructureElement = cpb.create();
        }
        return props_AggregationStructureElement;
      case LanguageConceptSwitch.AndConstraint:
        if (props_AndConstraint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("AND");
          props_AndConstraint = cpb.create();
        }
        return props_AndConstraint;
      case LanguageConceptSwitch.BetweenConstraint:
        if (props_BetweenConstraint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("BETWEEN");
          props_BetweenConstraint = cpb.create();
        }
        return props_BetweenConstraint;
      case LanguageConceptSwitch.Character:
        if (props_Character == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Character = cpb.create();
        }
        return props_Character;
      case LanguageConceptSwitch.ComparisonConstraint:
        if (props_ComparisonConstraint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("COMPARE");
          props_ComparisonConstraint = cpb.create();
        }
        return props_ComparisonConstraint;
      case LanguageConceptSwitch.Constraint:
        if (props_Constraint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Constraint = cpb.create();
        }
        return props_Constraint;
      case LanguageConceptSwitch.ConstraintCriterium:
        if (props_ConstraintCriterium == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ConstraintCriterium = cpb.create();
        }
        return props_ConstraintCriterium;
      case LanguageConceptSwitch.ConstraintOperator:
        if (props_ConstraintOperator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ConstraintOperator = cpb.create();
        }
        return props_ConstraintOperator;
      case LanguageConceptSwitch.DataDictionaryModel:
        if (props_DataDictionaryModel == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DataDictionaryModel = cpb.create();
        }
        return props_DataDictionaryModel;
      case LanguageConceptSwitch.Date:
        if (props_Date == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Date = cpb.create();
        }
        return props_Date;
      case LanguageConceptSwitch.Decimal:
        if (props_Decimal == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Decimal = cpb.create();
        }
        return props_Decimal;
      case LanguageConceptSwitch.Domain:
        if (props_Domain == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Domain = cpb.create();
        }
        return props_Domain;
      case LanguageConceptSwitch.Element:
        if (props_Element == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Element = cpb.create();
        }
        return props_Element;
      case LanguageConceptSwitch.ExclusiveSpecialization:
        if (props_ExclusiveSpecialization == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ExclusiveSpecialization = cpb.create();
        }
        return props_ExclusiveSpecialization;
      case LanguageConceptSwitch.FieldDefinition:
        if (props_FieldDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_FieldDefinition = cpb.create();
        }
        return props_FieldDefinition;
      case LanguageConceptSwitch.InConstraint:
        if (props_InConstraint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("IN");
          props_InConstraint = cpb.create();
        }
        return props_InConstraint;
      case LanguageConceptSwitch.InValue:
        if (props_InValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_InValue = cpb.create();
        }
        return props_InValue;
      case LanguageConceptSwitch.Integer:
        if (props_Integer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Integer = cpb.create();
        }
        return props_Integer;
      case LanguageConceptSwitch.Logical:
        if (props_Logical == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Logical = cpb.create();
        }
        return props_Logical;
      case LanguageConceptSwitch.NonexclusiveSpecialization:
        if (props_NonexclusiveSpecialization == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_NonexclusiveSpecialization = cpb.create();
        }
        return props_NonexclusiveSpecialization;
      case LanguageConceptSwitch.NotNullConstraint:
        if (props_NotNullConstraint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("NOT NULL");
          props_NotNullConstraint = cpb.create();
        }
        return props_NotNullConstraint;
      case LanguageConceptSwitch.OrConstraint:
        if (props_OrConstraint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OR");
          props_OrConstraint = cpb.create();
        }
        return props_OrConstraint;
      case LanguageConceptSwitch.PredefinedDomain:
        if (props_PredefinedDomain == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_PredefinedDomain = cpb.create();
        }
        return props_PredefinedDomain;
      case LanguageConceptSwitch.PredefinedDomainLengthConstraint:
        if (props_PredefinedDomainLengthConstraint == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PredefinedDomainLengthConstraint");
          props_PredefinedDomainLengthConstraint = cpb.create();
        }
        return props_PredefinedDomainLengthConstraint;
      case LanguageConceptSwitch.ReferenceFieldDefinition:
        if (props_ReferenceFieldDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ReferenceFieldDefinition = cpb.create();
        }
        return props_ReferenceFieldDefinition;
      case LanguageConceptSwitch.ReferenceFieldElement:
        if (props_ReferenceFieldElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ReferenceFieldElement = cpb.create();
        }
        return props_ReferenceFieldElement;
      case LanguageConceptSwitch.SemanticDomain:
        if (props_SemanticDomain == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SemanticDomain = cpb.create();
        }
        return props_SemanticDomain;
      case LanguageConceptSwitch.SetStructureElement:
        if (props_SetStructureElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SetStructureElement = cpb.create();
        }
        return props_SetStructureElement;
      case LanguageConceptSwitch.SpecializationStructureElement:
        if (props_SpecializationStructureElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_SpecializationStructureElement = cpb.create();
        }
        return props_SpecializationStructureElement;
      case LanguageConceptSwitch.StructureDefinition:
        if (props_StructureDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_StructureDefinition = cpb.create();
        }
        return props_StructureDefinition;
      case LanguageConceptSwitch.StructureElement:
        if (props_StructureElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_StructureElement = cpb.create();
        }
        return props_StructureElement;
      case LanguageConceptSwitch.ValueFieldDefinition:
        if (props_ValueFieldDefinition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ValueFieldDefinition = cpb.create();
        }
        return props_ValueFieldDefinition;
      case LanguageConceptSwitch.ValueFieldElement:
        if (props_ValueFieldElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ValueFieldElement = cpb.create();
        }
        return props_ValueFieldElement;
    }
    return null;
  }
}
